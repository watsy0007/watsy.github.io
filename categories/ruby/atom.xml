<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | watsy0007]]></title>
  <link href="http://blog.watsy0007.com/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.watsy0007.com/"/>
  <updated>2016-09-29T19:38:07+08:00</updated>
  <id>http://blog.watsy0007.com/</id>
  <author>
    <name><![CDATA[watsy0007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails+elasticsearch畅游数据]]></title>
    <link href="http://blog.watsy0007.com/2016-09-22-rails+elasticsearch%E7%95%85%E6%B8%B8%E6%95%B0%E6%8D%AE.html"/>
    <updated>2016-09-22T00:00:00+08:00</updated>
    <id>http://blog.watsy0007.com/rails+elasticsearch畅游数据</id>
    <content type="html"><![CDATA[<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"></h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
rails 使用 elasticsearch 小记
</p>

<p>
<!-- more -->
</p>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">环境</h3>
<div class="outline-text-3" id="text-orgheadline2">
<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">环境</th>
<th scope="col" class="org-right">版本</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">系统</td>
<td class="org-right">mac os x 10.12</td>
</tr>

<tr>
<td class="org-left">ruby</td>
<td class="org-right">2.3.1</td>
</tr>

<tr>
<td class="org-left">rails</td>
<td class="org-right">5.0.0.1</td>
</tr>

<tr>
<td class="org-left">elasticsearch</td>
<td class="org-right">2.4</td>
</tr>

<tr>
<td class="org-left">docker</td>
<td class="org-right">1.12.1</td>
</tr>

<tr>
<td class="org-left">mysql</td>
<td class="org-right">5.7</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">配置mysql</h3>
<div class="outline-text-3" id="text-orgheadline3">
<div class="org-src-container">

<pre class="src src-shell">docker pull mysql
doacker run --name els_db -p <span style="color: #d75fd7;">3306:3306</span> -t mysql
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4">安装elasticsearch</h3>
<div class="outline-text-3" id="text-orgheadline4">
<div class="org-src-container">

<pre class="src src-shell">docker pull elasticsearch
docker run --name els -p <span style="color: #d75fd7;">9200:9200</span> -t elasticsearch
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5">新建rails项目</h3>
<div class="outline-text-3" id="text-orgheadline5">
<div class="org-src-container">

<pre class="src src-shell">rails new els --database=mysql
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">导入数据</h3>
<div class="outline-text-3" id="text-orgheadline6">
<p>
配置config/database.yml
</p>

<p>
新建article模型
</p>
<div class="org-src-container">

<pre class="src src-shell">rails g model Article title:string content:text
</pre>
</div>

<p>
编辑db/seed.rb
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #d75fd7;">1</span>.to<span style="color: #268bd2;">(</span><span style="color: #d75fd7;">100</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2; font-weight: bold;">do</span> |index|
  <span style="color: #df005f; font-weight: bold;">Article</span>.create!<span style="color: #268bd2;">(</span><span style="color: #d75fd7;">title:</span> <span style="color: #2aa198;">"title-</span><span style="color: #8787d7;">#{index}</span><span style="color: #2aa198;">"</span>, <span style="color: #d75fd7;">content:</span> <span style="color: #2aa198;">"content </span><span style="color: #8787d7;">#{index * index}</span><span style="color: #2aa198;">"</span><span style="color: #268bd2;">)</span>
<span style="color: #268bd2; font-weight: bold;">end</span>
</pre>
</div>

<p>
执行迁移
</p>
<div class="org-src-container">

<pre class="src src-shell">rails db:create &amp;&amp; rails db:migrate &amp;&amp; rails db:seed
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline7" class="outline-3">
<h3 id="orgheadline7">配置elasticsearch</h3>
<div class="outline-text-3" id="text-orgheadline7">
<p>
引入gem
</p>
<div class="org-src-container">

<pre class="src src-ruby">gem <span style="color: #2aa198;">'elasticsearch-model'</span>
gem <span style="color: #2aa198;">'elasticsearch-rails'</span>
gem <span style="color: #2aa198;">'elasticsearch-persistence'</span>
</pre>
</div>

<p>
执行
</p>
<div class="org-src-container">

<pre class="src src-shell"><span style="color: #268bd2;">echo</span> <span style="color: #2aa198;">"require 'elasticsearch/rails/tasks/import'"</span> &gt; lib/tasks/elasticsearch.rake

rails g migration AddIndexesToArticles
</pre>
</div>

<p>
编辑迁移
</p>
<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #268bd2; font-weight: bold;">class</span> <span style="color: #df005f; font-weight: bold;">AddIndexesToArticles</span> &lt; <span style="color: #df005f; font-weight: bold;">ActiveRecorad</span>::<span style="color: #df005f; font-weight: bold;">Migration</span>
  <span style="color: #268bd2; font-weight: bold;">def</span> <span style="color: #d75fd7; font-weight: bold;">change</span>
    add_index <span style="color: #d75fd7;">:articles</span>, <span style="color: #d75fd7;">:title</span>
    add_index <span style="color: #d75fd7;">:articles</span>, <span style="color: #d75fd7;">:content</span>
  <span style="color: #268bd2; font-weight: bold;">end</span>
<span style="color: #268bd2; font-weight: bold;">end</span>
</pre>
</div>

<p>
编辑article.rb
</p>

<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #268bd2; font-weight: bold;">class</span> <span style="color: #df005f; font-weight: bold;">Article</span> &lt; <span style="color: #df005f; font-weight: bold;">ApplicationRecord</span>
  <span style="color: #268bd2;">include</span> <span style="color: #df005f; font-weight: bold;">Elasticsearch</span>::<span style="color: #df005f; font-weight: bold;">Model</span>
  <span style="color: #268bd2;">include</span> <span style="color: #df005f; font-weight: bold;">Elasticsearch</span>::<span style="color: #df005f; font-weight: bold;">Model</span>::<span style="color: #df005f; font-weight: bold;">Callbacks</span>

  mapping <span style="color: #d75fd7;">dynamic:</span> <span style="color: #d75fd7;">false</span> <span style="color: #268bd2; font-weight: bold;">do</span>
    indexes <span style="color: #d75fd7;">:title</span>
    indexes <span style="color: #d75fd7;">:content</span>
  <span style="color: #268bd2; font-weight: bold;">end</span>
<span style="color: #268bd2; font-weight: bold;">end</span>
</pre>
</div>

<p>
执行
</p>
<div class="org-src-container">

<pre class="src src-shell">bundle update
rake environment elasticsearch:import:all <span style="color: #8787d7;">FORCE</span>=y
</pre>
</div>
</div>
</div>

<div id="outline-container-orgheadline8" class="outline-3">
<h3 id="orgheadline8">测试</h3>
<div class="outline-text-3" id="text-orgheadline8">
<p>
rails console中执行
</p>

<div class="org-src-container">

<pre class="src src-ruby">response = <span style="color: #df005f; font-weight: bold;">Article</span>.search<span style="color: #268bd2;">(</span><span style="color: #2aa198;">'title-1'</span><span style="color: #268bd2;">)</span>
response.took
response.results
response.records.to_a
</pre>
</div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks-ruby 笔记(1)]]></title>
    <link href="http://blog.watsy0007.com/2016-05-01-ruby-ss-note.html"/>
    <updated>2016-05-01T00:00:00+08:00</updated>
    <id>http://blog.watsy0007.com/ruby-ss-note</id>
    <content type="html"><![CDATA[<p>
ruby开发ss 系列文章第一篇&#x2014; tcp 服务器
</p>




<p>
<!-- more -->
</p>




<p>
功能
</p>




<ol class="org-ol">
<li>多端口绑定</li>
<li>每个tcp 独立运行</li>
<li>任一tcp server 异常自动重启</li>
</ol>




<div class="org-src-container">

<pre class="src src-ruby"><span style="color: #008787; background-color: #262626;">#</span><span style="color: #008787; background-color: #262626;">!/usr/bin/env ruby</span>
<span style="color: #008787; background-color: #262626;">#</span>
<span style="color: #268bd2;">require</span> <span style="color: #2aa198;">"bundler/setup"</span>
<span style="color: #268bd2;">require</span> <span style="color: #2aa198;">"celluloid/io"</span>
<span style="color: #268bd2;">require</span> <span style="color: #2aa198;">'celluloid/current'</span>

<span style="color: #268bd2; font-weight: bold;">class</span> <span style="color: #df005f; font-weight: bold;">EchoServer</span>
  <span style="color: #268bd2;">include</span> <span style="color: #df005f; font-weight: bold;">Celluloid</span>::<span style="color: #df005f; font-weight: bold;">IO</span>
  finalizer <span style="color: #d75fd7;">:finalize</span>

  <span style="color: #268bd2; font-weight: bold;">def</span> <span style="color: #d75fd7; font-weight: bold;">initialize</span><span style="color: #268bd2;">(</span>host, port<span style="color: #268bd2;">)</span>
    <span style="color: #268bd2;">puts</span> <span style="color: #2aa198;">"*** Starting echo server on </span><span style="color: #8787d7;">#{host}</span><span style="color: #2aa198;">:</span><span style="color: #8787d7;">#{port}</span><span style="color: #2aa198;">"</span>
    <span style="color: #8787d7;">@server</span> = <span style="color: #df005f; font-weight: bold;">TCPServer</span>.new<span style="color: #268bd2;">(</span>host, port<span style="color: #268bd2;">)</span>
    async.run
  <span style="color: #268bd2; font-weight: bold;">end</span>

  <span style="color: #268bd2; font-weight: bold;">def</span> <span style="color: #d75fd7; font-weight: bold;">finalize</span>
    <span style="color: #268bd2;">puts</span> <span style="color: #2aa198;">"finalize </span><span style="color: #8787d7;">#{@server}</span><span style="color: #2aa198;">"</span>
    <span style="color: #8787d7;">@server</span>.close <span style="color: #268bd2; font-weight: bold;">if</span> <span style="color: #8787d7;">@server</span>
  <span style="color: #268bd2; font-weight: bold;">end</span>

  <span style="color: #268bd2; font-weight: bold;">def</span> <span style="color: #d75fd7; font-weight: bold;">run</span>
    <span style="color: #268bd2;">loop</span> <span style="color: #268bd2;">{</span> async.handle_connection <span style="color: #8787d7;">@server</span>.accept <span style="color: #268bd2;">}</span>
  <span style="color: #268bd2; font-weight: bold;">end</span>

  <span style="color: #268bd2; font-weight: bold;">def</span> <span style="color: #d75fd7; font-weight: bold;">handle_connection</span><span style="color: #268bd2;">(</span>socket<span style="color: #268bd2;">)</span>
    _, port, host = socket.peeraddr
    <span style="color: #268bd2;">puts</span> <span style="color: #2aa198;">"*** Received connection from </span><span style="color: #8787d7;">#{host}</span><span style="color: #2aa198;">:</span><span style="color: #8787d7;">#{port}</span><span style="color: #2aa198;">"</span>
    <span style="color: #268bd2;">loop</span> <span style="color: #268bd2; font-weight: bold;">do</span>
      reads = socket.read
      <span style="color: #268bd2;">raise</span> <span style="color: #df005f; font-weight: bold;">EOFError</span>, <span style="color: #2aa198;">'error'</span> <span style="color: #268bd2; font-weight: bold;">if</span> reads.empty? &amp;&amp; socket.eof?
      socket.write reads
    <span style="color: #268bd2; font-weight: bold;">end</span>
  <span style="color: #268bd2; font-weight: bold;">rescue</span> <span style="color: #df005f; font-weight: bold;">EOFError</span>
    <span style="color: #268bd2;">puts</span> <span style="color: #2aa198;">"*** </span><span style="color: #8787d7;">#{host}</span><span style="color: #2aa198;">:</span><span style="color: #8787d7;">#{port}</span><span style="color: #2aa198;"> disconnected"</span>
    socket.close
  <span style="color: #268bd2; font-weight: bold;">end</span>
<span style="color: #268bd2; font-weight: bold;">end</span>

supervisor = <span style="color: #df005f; font-weight: bold;">EchoServer</span>.supervise_as <span style="color: #d75fd7;">:_1234</span>, <span style="color: #2aa198;">'127.0.0.1'</span>, <span style="color: #d75fd7;">1234</span>
<span style="color: #df005f; font-weight: bold;">EchoServer</span>.supervise_as <span style="color: #d75fd7;">:_1235</span>, <span style="color: #2aa198;">'127.0.0.1'</span>, <span style="color: #d75fd7;">1235</span>
<span style="color: #268bd2;">trap</span><span style="color: #268bd2;">(</span><span style="color: #2aa198;">"INT"</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2; font-weight: bold;">do</span>
  supervisor.terminate
  <span style="color: #268bd2;">exit</span>
<span style="color: #268bd2; font-weight: bold;">end</span>

timers = <span style="color: #df005f; font-weight: bold;">Timers</span>::<span style="color: #df005f; font-weight: bold;">Group</span>.new
timers.every<span style="color: #268bd2;">(</span><span style="color: #d75fd7;">5</span><span style="color: #268bd2;">)</span> <span style="color: #268bd2; font-weight: bold;">do</span>
  actor = supervisor<span style="color: #268bd2;">[</span><span style="color: #d75fd7;">:_1234</span><span style="color: #268bd2;">]</span>
  <span style="color: #268bd2; font-weight: bold;">if</span> actor
    <span style="color: #268bd2;">puts</span> <span style="color: #2aa198;">'kill server 1'</span>
    <span style="color: #268bd2; font-weight: bold;">next</span> supervisor.remove<span style="color: #268bd2;">(</span>actor<span style="color: #268bd2;">)</span>
  <span style="color: #268bd2; font-weight: bold;">end</span>
  <span style="color: #df005f; font-weight: bold;">EchoServer</span>.supervise_as <span style="color: #d75fd7;">:_1234</span>, <span style="color: #2aa198;">'127.0.0.1'</span>, <span style="color: #d75fd7;">1234</span>
<span style="color: #268bd2; font-weight: bold;">end</span>
<span style="color: #268bd2;">loop</span> <span style="color: #268bd2;">{</span> timers.wait <span style="color: #268bd2;">}</span>
</pre>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Engine 拆分业务方案]]></title>
    <link href="http://blog.watsy0007.com/2016-04-29-rails-split-engine.html"/>
    <updated>2016-04-29T00:00:00+08:00</updated>
    <id>http://blog.watsy0007.com/rails-split-engine</id>
    <content type="html"><![CDATA[<p>
最近随着业务需要，需要对耦合在一起的任务进行拆分，正式发布之前这里记录一下拆分思路。
有一些和业务相关的内容，已经采用正则替换。^-^
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">项目发展背景</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
简单介绍下背景，在创业公司采用了ror 做最早的api。
之后随着业务发展，逐步增加sso 模块；后台admin模块；聊天im模块；推荐recommend模块；dev 调试模块，最近又新增了1个微信分享的share模块。
可预见的未来还会有其他业务模块继续增加。
</p>

<p>
业务越来越复杂细化，代码越来越多，后端开发人数从原来2人增加到接近10人。
</p>
</div>
</div>




<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">面临挑战</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
后台是用1个代码库的。
虽然我们在业务设计时候是遵循正交设计。但是实际很多模块之间复用了一些公共代码.公共代码里面耦合了业务实现。
早期用着很爽，随着时间慢慢暴露因为耦度高导致改动成本很大的现实！
</p>

<p>
尽管我们有单元测试，但是改动起来各种单元测试报错，已经很难揣测最早的设计意图了。
现实情况是经常遇到开发1个模块的功能，需要考虑其他几个模块实现。
</p>
</div>
</div>




<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">升级方案</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
经过讨论得出我们现在到了业务发展，需要拆分子系统来满足这个阶段的业务和为下1个阶段进行铺垫。
</p>

<p>
拆分子系统目前大家比较公认的是微服务方案。
</p>

<p>
在权衡微服务方案过程中，考虑到实现微服务方案有很比较大的成本，服务发现和异常处理。这个是长期的事情。
在这之前，业务是一定要拆分的。继续找方案，发现rails 提供了业务层的拆分方案。rails engine方案，
rails engine方案可以对同1个项目内的代码进行组织成不同的模块实现业务上的拆分。
</p>

<p>
具体拆分方案如下
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">模块</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Core</td>
<td class="org-left">核心模型</td>
</tr>

<tr>
<td class="org-left">Api</td>
<td class="org-left">api</td>
</tr>

<tr>
<td class="org-left">Admin</td>
<td class="org-left">后台管理</td>
</tr>

<tr>
<td class="org-left">sso</td>
<td class="org-left">单点登陆</td>
</tr>

<tr>
<td class="org-left">recommand</td>
<td class="org-left">推荐模块</td>
</tr>

<tr>
<td class="org-left">dev</td>
<td class="org-left">工程师调试模块</td>
</tr>

<tr>
<td class="org-left">share</td>
<td class="org-left">分享活动模块</td>
</tr>
</tbody>
</table>


<br>
<p>
发布上线系统
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="org-left" />

<col  class="org-left" />

<col  class="org-left" />
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">系统</th>
<th scope="col" class="org-left">模块</th>
<th scope="col" class="org-left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Api</td>
<td class="org-left">Api + Core</td>
<td class="org-left">客户端请求api</td>
</tr>

<tr>
<td class="org-left">Admin</td>
<td class="org-left">Admin + Core</td>
<td class="org-left">运维人员</td>
</tr>

<tr>
<td class="org-left">sso</td>
<td class="org-left">sso + Core</td>
<td class="org-left">单点验证登陆</td>
</tr>

<tr>
<td class="org-left">recommand</td>
<td class="org-left">Recommand</td>
<td class="org-left">推荐算法</td>
</tr>

<tr>
<td class="org-left">share</td>
<td class="org-left">share + Core</td>
<td class="org-left">分享活动页面</td>
</tr>
</tbody>
</table>

<br>
<p>
拆分方案以后，每个系统可以独立发布，快速迭代上线。毕竟我们是用ror 开发，是创业型公司，这很重要。
</p>
</div>
</div>




<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">方案明细</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
方案明确以后需要具体落实。
</p>

<p>
拆分Rails Engine并不复杂。详情可以<a href="http://api.rubyonrails.org">点我</a>。
</p>

<p>
在具体操作过程中，需要注意如下几点
</p>

<ol class="org-ol">
<li>功能究竟放在哪个模块比较合适</li>
<li>代码究竟放在哪个结构下更合适</li>
<li>不兼容部分如何处理。</li>
</ol>
</div>
</div>




<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">最大问题</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
在明确了拆分细节以后，通过调研demo 很快演示了拆分的可行性。
下面要考虑的问题来了。
简单描述下问题是
</p>

<p>
<b>如何在高速行驶的告诉公路上不停车进行换轮胎？</b>
</p>

<p>
问题具体描述是
</p>

<ol class="org-ol">
<li>功能在继续开发</li>
<li>测试童鞋在测试上1个迭代的测试</li>
<li>正式环境切换</li>
<li>对用户和其他开发者无感知,无缝更新</li>
</ol>

<p>
权衡最后采用如下步骤
</p>

<ol class="org-ol">
<li>对demo 环境进行全面测试，处理方案明细中的注意事项，列出明细</li>
<li>对development 环境进行短暂冻结，快速拆分</li>
<li>对release后续的所有更新，采用人工方式，合并到development分支中</li>
<li>下一迭代合并到release 分支进入测试</li>
<li>下下迭代进入master 分支，真正拆分多个服务</li>
</ol>
</div>
</div>




<div id="outline-container-orgheadline6" class="outline-2">
<h2 id="orgheadline6">总结</h2>
<div class="outline-text-2" id="text-orgheadline6">
<p>
本篇文章属于强行写下来公开的1个技术决策过程。后续考虑写1个系列。
</p>
</div>
</div>

]]></content>
  </entry>
  
</feed>
