<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | watsy0007]]></title>
  <link href="http://blog.watsy0007.com/categories/programming/atom.xml" rel="self"/>
  <link href="http://blog.watsy0007.com/"/>
  <updated>2016-09-29T19:38:07+08:00</updated>
  <id>http://blog.watsy0007.com/</id>
  <author>
    <name><![CDATA[watsy0007]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我的编程习惯-工具篇]]></title>
    <link href="http://blog.watsy0007.com/2015-06-15-my-programming-habit-tools.html"/>
    <updated>2015-06-15T00:00:00+08:00</updated>
    <id>http://blog.watsy0007.com/my-programming-habit-tools</id>
    <content type="html"><![CDATA[<p>
继上1篇以后。不知道大家有没有什么疑问？
</p>




<p>
上1篇说的是习惯部分，如果大家细心点会发现。实际操作的时候，似乎不是这么回事，代码还是越写越乱，脏乱差的代码过不了多久照样会满天飞。
</p>




<p>
更重要问题一段时间回头看，忘记自己当初写的是啥了。。  
</p>




<p>
本篇和大家探讨一下在实践过程中，我们经常会忽略其重要性的 *工具*。  
</p>




<p>
<!-- more -->
</p>




<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1"><b>工具</b></h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
俗话说的好：工欲善其事，必先利其器。磨刀不误砍材功。  
</p>

<p>
要想代码写的好，就得工具玩的好。关二老爷功夫在高，没有青龙偃月刀+赤兔马之前也很苦哈哈的。上了赤兔马以后，直接升级战神了。更有甚者有人说关二爷后期不行就是赤兔马老了。。。恩，说远了。  
</p>

<p>
回到主题，对开发人员来说，工具的重要性不言而喻。  
</p>

<p>
对开发而言衡量1个工具好不好的标准在我看来有2条评判标准：  
</p>

<ol class="org-ol">
<li>自动化程度的高低</li>
<li>操作的便捷性</li>
</ol>

<p>
从我个人观点来看自动化相比便捷性的重要性更高1点。  
</p>

<p>
基于以上2点，审视日常使用工具。可以拆分为以下3块来讨论。
</p>
</div>

<div id="outline-container-orgheadline2" class="outline-3">
<h3 id="orgheadline2">1. <b>协同办公</b></h3>
<div class="outline-text-3" id="text-orgheadline2">
<p>
现代化的办公，本质上来说是众人对同一信息交流的过程。如果启动，监督，记录信息的过程是相当重要的。
根据每个公司的性质不同，团队人员情况，采用的方式也不一样。这块的工具和本篇主题关系不大，先略过。以后有机会在讲。  
本篇主要说说开发相关的。针对开发的协同。有2个点。  
</p>

<ol class="org-ol">
<li>任务管理</li>
<li>代码管理</li>
</ol>

<p>
任务管理，唔，跳过好了。  
剩下的只有代码的管理。  
代码的管理呢，其实没什么好选的，目前常见的就是 <b>git</b> 和 <b>svn</b> 2个选择。
然后选择工具呢？大家都有自己的使用习惯。
在这里我只推荐我用的工具。 <b>jetbrains系列工具下的CSV功能</b>
为啥这么推荐它呢？ 参考 工具评判标准的2点。自动化程度足够高，操作足够便捷。对SVN和git处理是一致的。  
</p>
</div>
</div>


<div id="outline-container-orgheadline3" class="outline-3">
<h3 id="orgheadline3">2. <b>代码编辑</b></h3>
<div class="outline-text-3" id="text-orgheadline3">
<p>
代码编辑这块不能多说，说不好就引发编辑器圣战^0^。通常大家的选择在
</p>
<ol class="org-ol">
<li>sublime text</li>
<li>jetbrains</li>
<li>vim</li>
<li>emacs</li>
<li>其他</li>
</ol>

<p>
根据每个人情况不一样。选择自己喜欢的就好。不过如果参考我上面的2条评判标准来看。针对代码的编辑。
结果不言而喻的是 <b>jerbrains</b> 系列工具更好。不要问我为什么。
用习惯了就知道。你真的想知道吗？既然这么想，我就勉强说几点吧。  
</p>

<ol class="org-ol">
<li>代码自动补全</li>
<li>整合代码协同</li>
<li>整合任务管理平台</li>
<li>整合debug</li>
<li>默认+自定义大量功能快捷键</li>
<li>代码格式化</li>
<li>大量插件</li>
</ol>

<p>
什么？这几点大家都有？这个我承认，但是从操作的便捷性上来说，jetbrains完胜。
</p>
</div>
</div>

<div id="outline-container-orgheadline4" class="outline-3">
<h3 id="orgheadline4">3. <b>效率类</b></h3>
<div class="outline-text-3" id="text-orgheadline4">
<p>
开发人员每天大量的时间都在和电脑打交道。细心点整理下日常工作有以下几个操作：
</p>

<ol class="org-ol">
<li>查找文件</li>
<li>编辑文件</li>
<li>搜索资料</li>
</ol>

<p>
查找文件对很多人来说是在windows磁盘建大量的目录，分门别类的保存文件。需要的时候1级1级的去展开目录，找到想要的文件。。
日积月累，有些资料完全忘记在哪了。。。想当初我用windows时候，没事无聊就把磁盘打开，从新建立更适合的分类，整理文件。
为此我还特地学习了<a href="http://www.baike.com/wiki/%E6%9D%9C%E5%A8%81%E5%8D%81%E8%BF%9B%E5%88%B6%E5%9B%BE%E4%B9%A6%E5%88%86%E7%B1%BB%E6%B3%95">杜威十进制图书分类法</a>。   
在换了mac以后，逐渐适应了系统自带的的<a href="http://zh.wikipedia.org/zh/Spotlight">spolight </a>。直到有1天，我看到了<a href="http://www.alfredapp.com">alfred 2</a>，果断的买了正版。
理由可以参看<a href="http://www.zhihu.com/question/20656680">借助Alfred 2的Workflows功能可以做哪些好玩的事情？</a>用了它以后，基本上就没怎么费心在文件夹目录和查找文件上了。  
当然对于linux用户来说。要啥手表。咱只要
</p>

<div class="org-src-container">

<pre class="src src-shell">updatedb &amp;&amp; locate myfile
grep <span style="color: #2aa198;">"content"</span>
</pre>
</div>

<p>
快速定位到文件以后，咱们开始编辑文件了。对文件的编辑有很多种，音视频啊，ppt啊，excel啊。代码啊。
在这里咱们只讨论代码和普通文本文件。
编辑的工具在上面已经讨论过，默认推荐jetbrains和sublime text
这里要多说1个工具是辅助工具。
细心1点留意日常编辑文件的状态，我发现会有很多文本是重复性的。  比如每天发固定内容的邮件，很多重复的代码片段。每次都要重复输入。
而这种行为对程序员来说是可以自动化的。如何自动化呢？当当当当。<a href="http://smilesoftware.com/TextExpander/index.html">
textexpander</a> ，介绍部分可以参看<a href="http://www.yangzhiping.com/tech/mac4.html">Mac 入门笔记（4）：文本输入</a>。补充1点，新版本出来以后会自动判断输入重复文本。
</p>
</div>
</div>
</div>




<div id="outline-container-orgheadline5" class="outline-2">
<h2 id="orgheadline5">结尾</h2>
<div class="outline-text-2" id="text-orgheadline5">
<p>
本篇原本是打算包含在习惯2里面的，考虑到内容的相关性，还是拿出来单独写一篇，不过质量并不高。
先挖坑，如果大家对内容有兴趣，我会把针对工具开专题。
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的编程习惯]]></title>
    <link href="http://blog.watsy0007.com/2015-05-24-my-programming-habit.html"/>
    <updated>2015-05-24T00:00:00+08:00</updated>
    <id>http://blog.watsy0007.com/my-programming-habit</id>
    <content type="html"><![CDATA[<p>
写这篇文章是总结自己入行这么久的感悟。    
不知道其他程序员怎么思考的，一直以来我都觉得自己不知道如何写程序！虽然也写了一些作品。但是从项目开发到结束的整个周期，我始终觉得自己完全是在摸着石头过河，碰运气刚好写了可以运行的代码。    
</p>




<p>
仔细想想，可以把自己以往的编码阶段分为4段。  
</p>




<p>
<!-- more -->
</p>




<ol class="org-ol">
<li>先动手后思考</li>
<li>边动手边思考</li>
<li>边思考边动手</li>
<li>先思考后动手</li>
</ol>




<div id="outline-container-orgheadline1" class="outline-2">
<h2 id="orgheadline1">1. 先动手后思考</h2>
<div class="outline-text-2" id="text-orgheadline1">
<p>
刚开始入门时候没人带领，很多功能需要摸索着实现，断断续续经历了疯狂的找源码，复制粘贴别人代码的阶段以后，开始自己考虑如何写功能。这个时候最痛苦事情是发现自己无从下手。只能从模仿别人代码开始练起。我想要实现的功能，找到相似的实现以后，自己对照着写下来在思考一遍。  
这个阶段的代码看上去是千奇百怪。只能运行，没有风格。        
</p>
</div>
</div>




<div id="outline-container-orgheadline2" class="outline-2">
<h2 id="orgheadline2">2. 边动手边思考</h2>
<div class="outline-text-2" id="text-orgheadline2">
<p>
熬过一段痛苦期开始尝试独立开发功能。进入1个新痛苦期，不知道程序如何设计。从以往的学习模仿经验中，反复的思考，功能怎么写，代码怎么写，复制粘贴自己的代码。运行起来。得不到自己想要的效果，究竟哪里出问题呢？还好当初有大神的指点，学会了**&lt;font color=red&gt;Debug&lt;/font&gt;**。利用语言自带的debug功能，一遍又一遍的跟踪查看自己的代码。写到哪里？出了什么问题？然后进行打补丁。针对各种逻辑分支进行单独处理。  
这个阶段的代码看上去和第一阶段类似，一般都是1个万能方法处理一切。不过开始有章法，有自己的代码风格。  
</p>
</div>
</div>




<div id="outline-container-orgheadline3" class="outline-2">
<h2 id="orgheadline3">3. 边思考边动手</h2>
<div class="outline-text-2" id="text-orgheadline3">
<p>
随着调试功能用的越来越熟练，个人在写程序过程中慢慢对调试产生了依赖。感觉写程序的效率越来越高，刷刷刷写完，开启**Debug**模式，跟踪查看是否每步都是我想要的结果，如果不是，关闭调试器，修改与预期不符合的代码段逻辑。    
不过时间长了，心里甚是恐慌，没了调试器，我基本上就写不了程序。慢慢的在写程序的时候去思考程序的内在逻辑，代码应该怎么写，在开启调试器之前，先在内心对代码逻辑运行一次，然后再启动调试器大段大段的在我不确定的地方进行调试。    
这个阶段的代码开始优美起来，会有注释，对具体的运算进行封装。根据需要拆分方法和对象，不过依然不干净。  
</p>
</div>
</div>




<div id="outline-container-orgheadline4" class="outline-2">
<h2 id="orgheadline4">4. 先思考后动手</h2>
<div class="outline-text-2" id="text-orgheadline4">
<p>
这个阶段是现在正在刻意训练的阶段。经过对过往习惯总结和对程序设计的进一步学习。开始明白设计应该先于代码。很多不好的代码是在开始设计时候思考的时间太少。在逻辑不严谨的情况下匆匆完成，看似很快完成，但是牺牲了后续的可维护性。只能对各种漏洞进行打补丁，下一轮在补丁上进行补丁，直到代码变得很难维护。    
那么先思考后动手究竟应该怎么做呢？我想很多人都知道这个概念，但是确不知道如何落地这个过程。在这我先抛砖引玉说下我的看法。  
</p>

<p>
首先要把思考这个过程拆分为2个过程。
</p>

<ol class="org-ol">
<li>思考业务</li>
<li>思考代码逻辑</li>
</ol>
</div>

<div id="outline-container-orgheadline5" class="outline-3">
<h3 id="orgheadline5">4.1 思考业务</h3>
<div class="outline-text-3" id="text-orgheadline5">
<p>
不能解决实际问题的代码，是没有价值的代码，不值得考虑的。在编写代码之前，我们首先要确认明白业务的内在逻辑。  
明白业务的内在逻辑说的更简单1点。  
就是要沟通思考，业务的执行顺序和执行过程中的输入变量和输出产物。然后还有极限边界处理和相关的隐变量（沟通过程中没有明确，但是业务要执行必须要考虑的，类是几何图形辅助线）。    
</p>

<p>
在确认业务逻辑从开始获取输入输出，到产出指定产物这个流程明白以后，业务上的思考算结算。    
</p>
</div>
</div>

<div id="outline-container-orgheadline6" class="outline-3">
<h3 id="orgheadline6">4.2 思考代码逻辑</h3>
<div class="outline-text-3" id="text-orgheadline6">
<p>
代码写了多了以后我们会发现，1个万能的方法就足够满足业务的需要，只要按照业务的逻辑写完肯定是没问题的。这也是前面几个阶段在做的事情。  
但是实际情况确实，通常情况下，这个万能方法会因为权限太大，1个人干了所有的事情，导致这个方法发点小脾气，我们也无可奈何，任何和它的沟通都需要极大的成本才能妥协得到想要的结果。    
结果就是，它会变成巨无霸。当然它不是麦当那个巨无霸，它是在代码中巨无霸，和其他代码相比，它太大了。大到任何人看到它都会恐惧。    
另外1个情况就是我们会发现整个项目中，到处都是类似的代码存在。对业务的微小改动，对代码的改动可能是多处的。改的不好一群巨无霸会发脾气的。想想绿巨人给雷神来的一拳。    
</p>

<p>
那么什么样的代码逻辑是比较好的逻辑呢？    
这里要推荐大家学习下函数式编程。函数式变成好处多多。巴拉巴拉。。。    经过学习我发现函数或方法大部分时候。他们的内在逻辑是这样的(android版微信建议点击左下角原网页查看代码)：
</p>

<div class="org-src-container">

<pre class="src src-text">&#20989;&#25968;&#23450;&#20041;&#65288;&#21442;&#25968;1&#65292; &#21442;&#25968;2&#65292; &#21442;&#25968;3&#12290;&#12290;&#12290;&#65289;
  &#36807;&#28388;&#38750;&#27861;&#21442;&#25968;
  &#22788;&#29702;&#21442;&#25968;
  &#36820;&#22238;&#20540; = &#20854;&#20182;&#20989;&#25968;&#65288;&#22788;&#29702;&#21518;&#21442;&#25968;&#65289; 
  &#22788;&#29702;&#36820;&#22238;&#20540;
  &#36820;&#22238; &#36820;&#22238;&#20540;

&#20854;&#20182;&#20989;&#25968;&#65288;&#21442;&#25968;1&#65292; &#21442;&#25968;2&#65292; &#21442;&#25968;3&#12290;&#12290;&#12290;&#65289;
  &#36807;&#28388;&#38750;&#27861;&#21442;&#25968;
  &#22788;&#29702;&#21442;&#25968;
  &#36820;&#22238;&#20540; = &#20854;&#20182;&#20989;&#25968;&#65288;&#22788;&#29702;&#21518;&#21442;&#25968;&#65289; 
  &#22788;&#29702;&#36820;&#22238;&#20540;
  &#36820;&#22238; &#36820;&#22238;&#20540;
</pre>
</div>

<p>
看到没有，上面的方法很像递归的思考过程。  
顺着这个思路进一步思考。  
</p>

<p>
1个业务上逻辑可以通过以上的思路进行拆分。每一个方法内部只负责处理当前阶段的的逻辑。如果涉及到运算或极限处理，"递归"的新建另外1个函数来处理。最后最底层的函数基本上只负责：  
</p>

<ol class="org-ol">
<li>极限处理</li>
<li>逻辑运算</li>
<li>异常过滤</li>
</ol>

<p>
而在它上层的各层方法都对返回值进行严格过滤。确保逻辑上的严谨。    
</p>

<p>
依照这样的思路，有意的训练自己的编码过程，发现基本上在代码写完之前我不需要调试。写完以后的调试基本上也在2个地方进行  
</p>

<ol class="org-ol">
<li>书写错误</li>
<li>底层运算和过滤函数</li>
</ol>

<p>
这里可能有的朋友会问，良好的设计不是应该考虑设计模式吗？回掉函数呢？  
恭喜你，你是第一个发现问题的。我这里在特别说明下：
</p>

<p>
*参数1，参数2，参数3。。。*，参数是语言自带变量类型，包括类实例和函数。  
</p>

<p>
按照这个思路进行训练，发现自己的代码逻辑变得严谨。风格开始一致。每个方法都很短.  
</p>

<p>
或许以后我还会有新的发现，新的思路，不过到现阶段，我终于觉得我会写代码了。这让我很欣慰。  
</p>

<p>
不知道我的这篇文章对大家是否有所启发？    
如果有更好的思路也希望能整理出来大家一起交流。  
</p>
</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
