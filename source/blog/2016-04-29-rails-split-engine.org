#+TITLE: rails engine 拆分业务方案
#+DATE: 2016-04-29
#+SETUPFILE: ~/Documents/octopress/setupfile.org
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: ruby
#+JEKYLL_TAGS: ruby rails 
#+JEKYLL_PUBLISHED: true
#+JEKYLL_COMMENTS: true

最近随着业务需要，需要对耦合在一起的任务进行拆分，正式发布之前这里记录一下拆分思路。
有一些和业务相关的内容，已经采用正则替换。^-^

#+BEGIN_COMMENT
题纲

1. 项目大概发展背景
2. 业务拆分需求
3. 拆分的方向
4. 方案确定
5. rails engine介绍
6. 拆分具体方案
7. 问题来了，如何在告诉公路上换轮胎
8. 总结
 
#+END_COMMENT

{{{more}}}

** 项目发展背景

简单介绍下背景，在创业公司采用了ror 做最早的api。
之后随着业务发展，逐步增加sso 模块；后台admin模块；聊天im模块；推荐recommend模块；dev 调试模块，最近又新增了1个微信分享的share模块。
可预见的未来还会有其他业务模块继续增加。

业务越来越复杂细化，代码越来越多，后端开发人数从原来2人增加到接近10人。

** 面临挑战

后台是用1个代码库的。
虽然我们在业务设计时候是遵循正交设计。但是实际很多模块之间复用了一些公共代码.公共代码里面耦合了业务实现。
早期用着很爽，随着时间慢慢暴露因为耦度高导致改动成本很大的现实！

尽管我们有单元测试，但是改动起来各种单元测试报错，已经很难揣测最早的设计意图了。
现实情况是经常遇到开发1个模块的功能，需要考虑其他几个模块实现。

** 升级方案

经过讨论得出我们现在到了业务发展，需要拆分子系统来满足这个阶段的业务和为下1个阶段进行铺垫。

拆分子系统目前大家比较公认的是微服务方案。

在权衡微服务方案过程中，考虑到实现微服务方案有很比较大的成本，服务发现和异常处理。这个是长期的事情。
在这之前，业务是一定要拆分的。继续找方案，发现rails 提供了业务层的拆分方案。rails engine方案，
rails engine方案可以对同1个项目内的代码进行组织成不同的模块实现业务上的拆分。

具体拆分方案如下

| 模块      | 功能           |
|-----------+----------------|
| Core      | 核心模型       |
| Api       | api            |
| Admin     | 后台管理       |
| sso       | 单点登陆       |
| recommand | 推荐模块       |
| dev       | 工程师调试模块 |
| share     | 分享活动模块   |


#+BEGIN_HTML
<br>
#+END_HTML
发布上线系统

| 系统      | 模块         | 功能          |
|-----------+--------------+---------------|
| Api       | Api + Core   | 客户端请求api |
| Admin     | Admin + Core | 运维人员      |
| sso       | sso + Core   | 单点验证登陆  |
| recommand | Recommand    | 推荐算法      |
| share     | share + Core | 分享活动页面  |

#+BEGIN_HTML
<br>
#+END_HTML
拆分方案以后，每个系统可以独立发布，快速迭代上线。毕竟我们是用ror 开发，是创业型公司，这很重要。

** 方案明细

方案明确以后需要具体落实。

拆分Rails Engine并不复杂。详情可以[[http://api.rubyonrails.org][点我]]。

在具体操作过程中，需要注意如下几点

+ 1
+ 2

1) 11
2) 22

1. 功能究竟放在哪个模块比较合适
2. 代码究竟放在哪个结构下更合适
3. 不兼容部分如何处理。

** 最大问题

在明确了拆分细节以后，通过调研demo 很快演示了拆分的可行性。
下面要考虑的问题来了。
简单描述下问题是

*如何在高速行驶的告诉公路上不停车进行换轮胎？*

问题具体描述是

1. 功能在继续开发
2. 测试童鞋在测试上1个迭代的测试
3. 正式环境切换
4. 对用户和其他开发者无感知,无缝更新

权衡最后采用如下步骤

1. 对demo 环境进行全面测试，处理方案明细中的注意事项，列出明细
2. 对development 环境进行短暂冻结，快速拆分
3. 对release后续的所有更新，采用人工方式，合并到development分支中
4. 下一迭代合并到release 分支进入测试
5. 下下迭代进入master 分支，真正拆分多个服务

** 总结

本篇文章属于强行写下来公开的1个技术决策过程。后续考虑写1个系列。
